#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct CircularQueue {
    int items[MAX];
    int front, rear;
};

void enqueue(struct CircularQueue* q, int value) {
    if ((q->rear + 1) % MAX == q->front) {
        printf("Queue Overflow\n");
    } else {
        if (q->front == -1)  // If inserting the first element
            q->front = 0;
        q->rear = (q->rear + 1) % MAX;  // Move rear circularly
        q->items[q->rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

int dequeue(struct CircularQueue* q) {
    if (q->front == -1) {
        printf("Queue Underflow\n");
        return -1;
    } else {
        int value = q->items[q->front];
        if (q->front == q->rear) {  // Queue becomes empty
            q->front = q->rear = -1;
        } else {
            q->front = (q->front + 1) % MAX;  // Move front circularly
        }
        return value;
    }
}

void display(struct CircularQueue* q) {
    if (q->front == -1) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        int i = q->front;
        while (i != q->rear) {
            printf("%d ", q->items[i]);
            i = (i + 1) % MAX;
        }
        printf("%d\n", q->items[q->rear]);
    }
}

int main() {
    struct CircularQueue q;
    q.front = q.rear = -1;

    int choice, value;

    while (1) {
        printf("\nChoose operation:\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(&q, value);
                break;

            case 2:
                value = dequeue(&q);
                if (value != -1)
                    printf("%d dequeued from queue\n", value);
                break;

            case 3:
                display(&q);
                break;

            case 4:
                exit(0);

            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
