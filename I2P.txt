#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <conio.h>
#include <math.h>

#define SIZE 100

struct stack {
    int top;
    float items[SIZE];
};

void initStack(struct stack *s) {
    s->top = -1;
}

int isEmpty(struct stack *s) {
    return (s->top == -1);
}

int isFull(struct stack *s) {
    return (s->top == SIZE - 1);
}

void push(struct stack *s, float value) {
    if (isFull(s)) {
        printf("\nStack Overflow!\n");
    } else {
        s->items[++(s->top)] = value;
    }
}

float pop(struct stack *s) {
    if (isEmpty(s)) {
        printf("\nStack Underflow!\n");
        return -1;  
    } else {
        return s->items[(s->top)--];
    }
}

float evaluatePostfix(char* postfix) {
    struct stack s;
    initStack(&s);
    int i;
    float operand1, operand2, result;

    for (i = 0; postfix[i] != '\0'; i++) {
        char c = postfix[i];

        if (isdigit(c)) {
            push(&s, (float)(c - '0'));
        } else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
            operand2 = pop(&s);
            operand1 = pop(&s);

            switch (c) {
                case '+': result = operand1 + operand2; break;
                case '-': result = operand1 - operand2; break;
                case '*': result = operand1 * operand2; break;
                case '/': result = operand1 / operand2; break;
                case '^': result = pow(operand1, operand2); break;
            }

            push(&s, result);
        }
    }

    return pop(&s);
}

int main() {
    char postfix[SIZE];

    printf("Enter a postfix expression (single digits, no spaces): ");
    gets(postfix);

    float result = evaluatePostfix(postfix);

    printf("The result of the postfix expression is: %.2f\n", result);

    getch(); 
    return 0;
}
