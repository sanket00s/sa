#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* insert_beg(struct node* head) {
    int data;
    struct node* ptr;
    printf("Enter data: ");
    scanf("%d", &data);
    ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = data;
    ptr->next = head;
    head = ptr;
    return head;
}

struct node* insert_end(struct node* head) {
    int data;
    struct node* temp, *ptr;
    printf("Enter data: ");
    scanf("%d", &data);
    ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = data;
    ptr->next = NULL;

    if (head == NULL) {  // If the list is empty, set head to the new node
        return ptr;
    }

    temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = ptr;
    return head;
}

struct node* delete_beg(struct node* head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return NULL;
    }
    
    struct node* ptr = head;
    head = head->next;
    free(ptr);
    return head;
}

struct node* delete_end(struct node* head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return NULL;
    }

    struct node* ptr = head;
    struct node* temp = NULL;

    if (ptr->next == NULL) { // If there is only one node
        free(ptr);
        return NULL;
    }

    while (ptr->next != NULL) {
        temp = ptr;
        ptr = ptr->next;
    }
    temp->next = NULL;
    free(ptr);
    return head;
}

struct node* display(struct node* head) {
    struct node* ptr = head;
    if (ptr == NULL) {
        printf("List is empty!\n");
        return head;
    }

    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
    return head;
}

int main() {
    int choice;
    struct node* head = NULL; // Initialize head to NULL
    do {
        printf("MENU CHOICE\n");
        printf("1. Insert beg\n");
        printf("2. Insert end\n");
        printf("3. Delete beg\n");
        printf("4. Delete end\n");
        printf("5. Display\n");
        printf("6. EXIT\n");
        printf("Enter your choice:\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                head = insert_beg(head);
                break;

            case 2:
                head = insert_end(head);
                break;

            case 3:
                head = delete_beg(head);
                break;

            case 4:
                head = delete_end(head);
                break;

            case 5:
                head = display(head);
                break;

            case 6:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice\n");
        }
    } while (choice != 6);

    return 0;
}
